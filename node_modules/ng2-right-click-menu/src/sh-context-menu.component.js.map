{"version":3,"file":"sh-context-menu.component.js","sourceRoot":"","sources":["../../src/sh-context-menu.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAA6B,UAAU,EAAiB,SAAS,EAAoB,MAAM,eAAe,CAAC;AAyG1J,IAAa,sBAAsB;IAUjC,gCACU,UAA4B;QAA5B,eAAU,GAAV,UAAU,CAAkB;QAP5B,YAAO,GAAG,IAAI,YAAY,EAAE,CAAC;IAQnC,CAAC;IAEL,yCAAQ,GAAR;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;IAC9C,CAAC;IAED,mDAAkB,GAAlB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;YACnB,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAED,sCAAK,GAAL;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACtB,CAAC;IAED,wCAAO,GAAP,UAAQ,IAAwB;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC5B,MAAM,CAAC;QAET,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC;gBACX,QAAQ,EAAE,IAAI;gBACd,WAAW,EAAE,IAAI,CAAC,WAAW;aAC9B,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,EAAE,CAAA;QACd,CAAC;IACH,CAAC;IAED,+CAAc,GAAd,UAAe,IAAwB;QACrC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YACjB,MAAM,CAAC,KAAK,CAAC;QAEf,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAED,8CAAa,GAAb,UAAc,IAAwB;QACpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC;QAEd,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAED,+CAAc,GAAd;QACE,IAAM,OAAO,GACX,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;IAC1D,CAAC;IACH,6BAAC;AAAD,CAAC,AA5DD,IA4DC;AA3DU;IAAR,KAAK,EAAE;;wDAA6B;AAC5B;IAAR,KAAK,EAAE;;qDAA6B;AAC5B;IAAR,KAAK,EAAE;;2DAAkB;AAChB;IAAT,MAAM,EAAE;;uDAA8B;AAIhB;IAAtB,SAAS,CAAC,UAAU,CAAC;8BAAW,UAAU;wDAAC;AARjC,sBAAsB;IAhGlC,SAAS,CAAC;QACT,QAAQ,EAAE,iBAAiB;QAC3B,QAAQ,EAAE,g+BAqBX;QACC,MAAM,EAAE,CAAC,qjDAsEV,CAAC;KACD,CAAC;qCAYsB,gBAAgB;GAX3B,sBAAsB,CA4DlC;SA5DY,sBAAsB","sourcesContent":["import { ShContextService } from './sh-context-service';\nimport { IShContextOptions } from './sh-context-options';\nimport { Component, Input, Output, EventEmitter, ViewEncapsulation, OnInit, ElementRef, AfterViewInit, ViewChild, AfterContentInit } from \"@angular/core\";\n\nimport { IShContextMenuItem } from \"./sh-context-item\";\n\nexport interface ShContextPosition {\n  top: number;\n  left: number;\n}\n\n@Component({\n  selector: 'sh-context-menu',\n  template: `\n    <div #childRef class=\"sh-context--container\"\n      [style.left]=\"position.left + 'px'\"\n      [style.top]=\"position.top + 'px'\"\n      [style.direction]=\"(options.rtl ? 'rtl' : 'ltr' )\">\n      <ul>\n          <li *ngFor=\"let item of items\"\n            [ngClass]=\"{'sh-menu-item': !item.divider, 'sh-context-divider': item.divider, 'sh-menu-disabled': isItemDisabled(item), 'sh-menu-hidden': !isItemVisible(item)}\"\n            (click)=\"onClick(item)\">\n              <div *ngIf=\"!item.divider && !item.subMenu\" [sh-html]=\"item.label\">\n              </div>\n              <div *ngIf=\"item.subMenu\"\n                [sh-context-sub-menu]=\"item.subMenuItems\"\n                [sh-data-context]=\"dataContext\"\n                (closeSubMenu)=\"close()\"\n                [sh-html]=\"item.label\">\n               <div [ngClass]=\"{'right-arrow': !options.rtl, 'left-arrow': options.rtl}\"></div>\n              </div>\n          </li>\n      </ul>\n    </div>\n`,\n  styles: [`\n  .sh-context--container{\n    font-family: sans-serif;\n    position: fixed;\n    background: #ececec;\n    min-width: 150px;\n    border: 1px solid rgba(0,0,0,0.2);\n    border-radius: 3px;\n    box-shadow: 0 0 10px 2px rgba(0,0,0,0.1);\n    z-index: 100;\n    color: black;\n  }\n\n  .sh-context--container ul{\n    list-style: none;\n    padding: 5px 0;\n    margin: 0;\n  }\n\n  .sh-context--container ul li{\n      padding: 5px 10px 5px 15px;\n      transition: all 0.15s;\n  }\n\n  .sh-context--container ul li.sh-context-divider{\n      height: 1px;\n      margin: 1px 1px 8px 1px;\n      overflow: hidden;\n      background-color: #ececec;\n      border-bottom: 1px solid #d0d0d0;\n      line-height: 10px;\n    }\n\n  .sh-context--container ul li.sh-menu-item:hover{\n      cursor: pointer;\n      background: #4b8bec;\n      color: white;\n  }\n\n  .sh-context--container ul li.sh-menu-disabled{\n      color: #d0d0d0;\n   }\n\n   .sh-context--container ul li.sh-menu-item.sh-menu-hidden{\n      display: none;\n   }\n\n  .sh-context--container ul li.sh-menu-disabled:hover{\n      cursor: not-allowed;\n      color: #d0d0d0;\n      background: #ececec;\n  }\n\n  .right-arrow{\n    float: right;\n    margin-left: 10px;\n    margin-top: 3px;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-left: 8px solid black;\n  }\n\n  .left-arrow{\n    float: left;\n    margin-right: 10px;\n    margin-top: 3px;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-right: 8px solid black;\n  }\n`]\n})\nexport class ShContextMenuComponent implements OnInit, AfterContentInit {\n  @Input() position: ShContextPosition;\n  @Input() items: IShContextMenuItem[];\n  @Input() dataContext: any;\n  @Output() onClose = new EventEmitter();\n\n  options: IShContextOptions;\n\n  @ViewChild('childRef') childRef: ElementRef;\n\n  constructor(\n    private ctxService: ShContextService\n  ) { }\n\n  ngOnInit(): void {\n    this.options = this.ctxService.getOptions();\n  }\n\n  ngAfterContentInit(): void {\n    if (this.options.rtl)\n      this.setRtlLocation();\n  }\n\n  close() {\n    this.onClose.emit();\n  }\n\n  onClick(item: IShContextMenuItem) {\n    if (this.isItemDisabled(item))\n      return;\n\n    if (item.onClick) {\n      item.onClick({\n        menuItem: item,\n        dataContext: this.dataContext\n      });\n      this.close()\n    }\n  }\n\n  isItemDisabled(item: IShContextMenuItem) {\n    if (!item.disabled)\n      return false;\n\n    return item.disabled(this.dataContext);\n  }\n\n  isItemVisible(item: IShContextMenuItem) {\n    if (!item.visible)\n      return true;\n\n    return item.visible(this.dataContext);\n  }\n\n  setRtlLocation() {\n    const elmRect: ClientRect =\n      this.childRef.nativeElement.getClientRects()[0];\n\n    this.position.left = this.position.left - elmRect.width;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}