var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, Output, ElementRef, EventEmitter, Input, HostListener, ViewContainerRef, ComponentFactoryResolver } from "@angular/core";
import { ShContextMenuComponent } from "./sh-context-menu.component";
import { ShContextService } from "./sh-context-service";
var ShContextSubMenuDirective = (function () {
    function ShContextSubMenuDirective(viewRef, elmRef, resolver, ctxService) {
        this.viewRef = viewRef;
        this.elmRef = elmRef;
        this.resolver = resolver;
        this.ctxService = ctxService;
        this.closeSubMenu = new EventEmitter();
    }
    ShContextSubMenuDirective.prototype.ngOnInit = function () {
        this.options = this.ctxService.getOptions();
    };
    ShContextSubMenuDirective.prototype.onMouseOver = function (event) {
        this.closeCurrent();
        this.ctxComponent = this.createContextComponent();
        this.registerBindings();
        this.registerEvents();
        this.setLocation();
        return false;
    };
    ShContextSubMenuDirective.prototype.registerEvents = function () {
        var _this = this;
        this.ctxComponent.instance.onClose.subscribe(function () {
            _this.closeSubMenu.emit();
        });
    };
    ShContextSubMenuDirective.prototype.registerBindings = function () {
        this.ctxComponent.instance.items = this.menuItems;
        this.ctxComponent.instance.dataContext = this.dataContext;
    };
    ShContextSubMenuDirective.prototype.createContextComponent = function () {
        var shContextMenuFactory = this.resolver.resolveComponentFactory(ShContextMenuComponent);
        var shContextComponentRef = this.viewRef.createComponent(shContextMenuFactory);
        return shContextComponentRef;
    };
    ShContextSubMenuDirective.prototype.setLocation = function () {
        var _a = this.elmRef.nativeElement.getClientRects()[0], top = _a.top, left = _a.left, width = _a.width;
        var position = {
            top: top,
            left: this.options.rtl ? left : left + width
        };
        this.ctxComponent.instance.position = position;
    };
    ShContextSubMenuDirective.prototype.closeMenu = function () {
        this.closeSubMenu.emit();
    };
    ShContextSubMenuDirective.prototype.closeCurrent = function () {
        this.viewRef.clear();
    };
    return ShContextSubMenuDirective;
}());
__decorate([
    Input('sh-context-sub-menu'),
    __metadata("design:type", Array)
], ShContextSubMenuDirective.prototype, "menuItems", void 0);
__decorate([
    Input('sh-data-context'),
    __metadata("design:type", Object)
], ShContextSubMenuDirective.prototype, "dataContext", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], ShContextSubMenuDirective.prototype, "closeSubMenu", void 0);
__decorate([
    HostListener('mouseover', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MouseEvent]),
    __metadata("design:returntype", void 0)
], ShContextSubMenuDirective.prototype, "onMouseOver", null);
ShContextSubMenuDirective = __decorate([
    Directive({
        selector: '[sh-context-sub-menu]'
    }),
    __metadata("design:paramtypes", [ViewContainerRef,
        ElementRef,
        ComponentFactoryResolver,
        ShContextService])
], ShContextSubMenuDirective);
export { ShContextSubMenuDirective };
//# sourceMappingURL=sh-context-sub-menu.directive.js.map