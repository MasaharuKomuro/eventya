var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ShContextService } from './sh-context-service';
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild } from "@angular/core";
var ShContextMenuComponent = (function () {
    function ShContextMenuComponent(ctxService) {
        this.ctxService = ctxService;
        this.onClose = new EventEmitter();
    }
    ShContextMenuComponent.prototype.ngOnInit = function () {
        this.options = this.ctxService.getOptions();
    };
    ShContextMenuComponent.prototype.ngAfterContentInit = function () {
        if (this.options.rtl)
            this.setRtlLocation();
    };
    ShContextMenuComponent.prototype.close = function () {
        this.onClose.emit();
    };
    ShContextMenuComponent.prototype.onClick = function (item) {
        if (this.isItemDisabled(item))
            return;
        if (item.onClick) {
            item.onClick({
                menuItem: item,
                dataContext: this.dataContext
            });
            this.close();
        }
    };
    ShContextMenuComponent.prototype.isItemDisabled = function (item) {
        if (!item.disabled)
            return false;
        return item.disabled(this.dataContext);
    };
    ShContextMenuComponent.prototype.isItemVisible = function (item) {
        if (!item.visible)
            return true;
        return item.visible(this.dataContext);
    };
    ShContextMenuComponent.prototype.setRtlLocation = function () {
        var elmRect = this.childRef.nativeElement.getClientRects()[0];
        this.position.left = this.position.left - elmRect.width;
    };
    return ShContextMenuComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], ShContextMenuComponent.prototype, "position", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], ShContextMenuComponent.prototype, "items", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], ShContextMenuComponent.prototype, "dataContext", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], ShContextMenuComponent.prototype, "onClose", void 0);
__decorate([
    ViewChild('childRef'),
    __metadata("design:type", ElementRef)
], ShContextMenuComponent.prototype, "childRef", void 0);
ShContextMenuComponent = __decorate([
    Component({
        selector: 'sh-context-menu',
        template: "\n    <div #childRef class=\"sh-context--container\"\n      [style.left]=\"position.left + 'px'\"\n      [style.top]=\"position.top + 'px'\"\n      [style.direction]=\"(options.rtl ? 'rtl' : 'ltr' )\">\n      <ul>\n          <li *ngFor=\"let item of items\"\n            [ngClass]=\"{'sh-menu-item': !item.divider, 'sh-context-divider': item.divider, 'sh-menu-disabled': isItemDisabled(item), 'sh-menu-hidden': !isItemVisible(item)}\"\n            (click)=\"onClick(item)\">\n              <div *ngIf=\"!item.divider && !item.subMenu\" [sh-html]=\"item.label\">\n              </div>\n              <div *ngIf=\"item.subMenu\"\n                [sh-context-sub-menu]=\"item.subMenuItems\"\n                [sh-data-context]=\"dataContext\"\n                (closeSubMenu)=\"close()\"\n                [sh-html]=\"item.label\">\n               <div [ngClass]=\"{'right-arrow': !options.rtl, 'left-arrow': options.rtl}\"></div>\n              </div>\n          </li>\n      </ul>\n    </div>\n",
        styles: ["\n  .sh-context--container{\n    font-family: sans-serif;\n    position: fixed;\n    background: #ececec;\n    min-width: 150px;\n    border: 1px solid rgba(0,0,0,0.2);\n    border-radius: 3px;\n    box-shadow: 0 0 10px 2px rgba(0,0,0,0.1);\n    z-index: 100;\n    color: black;\n  }\n\n  .sh-context--container ul{\n    list-style: none;\n    padding: 5px 0;\n    margin: 0;\n  }\n\n  .sh-context--container ul li{\n      padding: 5px 10px 5px 15px;\n      transition: all 0.15s;\n  }\n\n  .sh-context--container ul li.sh-context-divider{\n      height: 1px;\n      margin: 1px 1px 8px 1px;\n      overflow: hidden;\n      background-color: #ececec;\n      border-bottom: 1px solid #d0d0d0;\n      line-height: 10px;\n    }\n\n  .sh-context--container ul li.sh-menu-item:hover{\n      cursor: pointer;\n      background: #4b8bec;\n      color: white;\n  }\n\n  .sh-context--container ul li.sh-menu-disabled{\n      color: #d0d0d0;\n   }\n\n   .sh-context--container ul li.sh-menu-item.sh-menu-hidden{\n      display: none;\n   }\n\n  .sh-context--container ul li.sh-menu-disabled:hover{\n      cursor: not-allowed;\n      color: #d0d0d0;\n      background: #ececec;\n  }\n\n  .right-arrow{\n    float: right;\n    margin-left: 10px;\n    margin-top: 3px;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-left: 8px solid black;\n  }\n\n  .left-arrow{\n    float: left;\n    margin-right: 10px;\n    margin-top: 3px;\n    border-top: 6px solid transparent;\n    border-bottom: 6px solid transparent;\n    border-right: 8px solid black;\n  }\n"]
    }),
    __metadata("design:paramtypes", [ShContextService])
], ShContextMenuComponent);
export { ShContextMenuComponent };
//# sourceMappingURL=sh-context-menu.component.js.map