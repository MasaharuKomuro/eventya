var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ShContextService } from './sh-context-service';
import { Directive, Input, HostListener, ViewContainerRef, ComponentFactoryResolver } from "@angular/core";
import { ShContextOverlayComponent } from './sh-context-overlay.component';
import { ShContextMenuComponent } from "./sh-context-menu.component";
var ShContextMenuDirective = (function () {
    function ShContextMenuDirective(viewRef, resolver, ctxService) {
        this.viewRef = viewRef;
        this.resolver = resolver;
        this.ctxService = ctxService;
    }
    ShContextMenuDirective.prototype.onClick = function (event) {
        this.options = this.ctxService.setOptions(this.options);
        this.closeMenu();
        this.ctxComponent = this.createContextComponent();
        this.overlayComponent = this.createOverlayComponent();
        this.registerBindings();
        this.registerEvents();
        this.setLocation(event);
        return false;
    };
    ShContextMenuDirective.prototype.registerEvents = function () {
        var _this = this;
        this.ctxComponent.instance.onClose.subscribe(function () {
            _this.closeMenu();
        });
        this.overlayComponent.instance.onClick.subscribe(function () { _this.closeMenu(); });
    };
    ShContextMenuDirective.prototype.registerBindings = function () {
        this.ctxComponent.instance.items = this.menuItems;
        this.ctxComponent.instance.dataContext = this.dataContext;
    };
    ShContextMenuDirective.prototype.createContextComponent = function () {
        var shContextMenuFactory = this.resolver.resolveComponentFactory(ShContextMenuComponent);
        var shContextComponentRef = this.viewRef.createComponent(shContextMenuFactory);
        return shContextComponentRef;
    };
    ShContextMenuDirective.prototype.createOverlayComponent = function () {
        var shContextOverlayFactory = this.resolver.resolveComponentFactory(ShContextOverlayComponent);
        var shContextOverlayRef = this.viewRef.createComponent(shContextOverlayFactory);
        return shContextOverlayRef;
    };
    ShContextMenuDirective.prototype.setLocation = function (event) {
        var clientX = event.clientX, clientY = event.clientY;
        var position = {
            top: clientY,
            left: clientX
        };
        this.ctxComponent.instance.position = position;
    };
    ShContextMenuDirective.prototype.closeMenu = function () {
        this.viewRef.clear();
    };
    return ShContextMenuDirective;
}());
__decorate([
    Input('sh-context'),
    __metadata("design:type", Array)
], ShContextMenuDirective.prototype, "menuItems", void 0);
__decorate([
    Input('sh-data-context'),
    __metadata("design:type", Object)
], ShContextMenuDirective.prototype, "dataContext", void 0);
__decorate([
    Input('sh-options'),
    __metadata("design:type", Object)
], ShContextMenuDirective.prototype, "options", void 0);
__decorate([
    HostListener('contextmenu', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [MouseEvent]),
    __metadata("design:returntype", void 0)
], ShContextMenuDirective.prototype, "onClick", null);
ShContextMenuDirective = __decorate([
    Directive({
        selector: '[sh-context]'
    }),
    __metadata("design:paramtypes", [ViewContainerRef,
        ComponentFactoryResolver,
        ShContextService])
], ShContextMenuDirective);
export { ShContextMenuDirective };
//# sourceMappingURL=sh-context-menu.directive.js.map